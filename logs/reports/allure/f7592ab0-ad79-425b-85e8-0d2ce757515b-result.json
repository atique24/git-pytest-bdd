{"name": "Check Mobile Phone", "status": "failed", "statusDetails": {"message": "TypeError: 'NoneType' object is not an iterator", "trace": "request = <FixtureRequest for <Function test_one>>, scenario = <pytest_bdd.parser.Scenario object at 0x0000027BEB75C4F0>, step = <pytest_bdd.parser.Step object at 0x0000027BEB75C5E0>\nstep_func = <function mobile_phone_displayed at 0x0000027BEB7525E0>\n\n    def _execute_step_function(request, scenario, step, step_func):\n        \"\"\"Execute step function.\n    \n        :param request: PyTest request.\n        :param scenario: Scenario.\n        :param step: Step.\n        :param function step_func: Step function.\n        :param example: Example table.\n        \"\"\"\n        kw = dict(request=request, feature=scenario.feature, scenario=scenario, step=step, step_func=step_func)\n    \n        request.config.hook.pytest_bdd_before_step(**kw)\n    \n        kw[\"step_func_args\"] = {}\n        try:\n            # Get the step argument values.\n            kwargs = dict((arg, request.getfixturevalue(arg)) for arg in get_args(step_func))\n            kw[\"step_func_args\"] = kwargs\n    \n            request.config.hook.pytest_bdd_before_step_call(**kw)\n            target_fixture = getattr(step_func, \"target_fixture\", None)\n            # Execute the step.\n>           return_value = step_func(**kwargs)\n\n..\\..\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\pytest_bdd\\scenario.py:113: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmobile = <pages.mobile_page.mobile_page.MobilePage object at 0x0000027BEB80FDC0>\n\n    @pytest.mark.usefixtures(\"click_mobile_tab\")\n    @then(\"all available mobiles are displayed\")\n    def mobile_phone_displayed(mobile):\n>       assert mobile.available_mobiles() == ['Samsung Galaxy', 'Xperia', 'IPhone']\nE       AssertionError: assert ['Xperia', 'IPhone', 'Samsung Galaxy'] == ['Samsung Galaxy', 'Xperia', 'IPhone']\nE         At index 0 diff: 'Xperia' != 'Samsung Galaxy'\nE         Full diff:\nE         - ['Samsung Galaxy', 'Xperia', 'IPhone']\nE         + ['Xperia', 'IPhone', 'Samsung Galaxy']\n\ntests\\step_defs\\test_mobile.py:17: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nrequest = <FixtureRequest for <Function test_one>>\n\n    @pytest.mark.usefixtures(*function_args)\n    def scenario_wrapper(request):\n>       _execute_scenario(feature, scenario, request, encoding)\n\n..\\..\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\pytest_bdd\\scenario.py:177: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\pytest_bdd\\scenario.py:143: in _execute_scenario\n    _execute_step_function(request, scenario, step, step_func)\n..\\..\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\pytest_bdd\\scenario.py:119: in _execute_step_function\n    request.config.hook.pytest_bdd_step_error(exception=exception, **kw)\n..\\..\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\n..\\..\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nhook = <_HookCaller 'pytest_bdd_step_error'>\nmethods = [<HookImpl plugin_name='2731245584240', plugin=<allure_pytest_bdd.pytest_bdd_listener.PytestBDDListener object at 0x00...t.py', plugin=<module 'tests.conftest' from 'C:\\\\Users\\\\Atique\\\\PycharmProjects\\\\git-pytest-bdd\\\\tests\\\\conftest.py'>>]\nkwargs = {'exception': AssertionError(\"assert ['Xperia', 'IPhone', 'Samsung Galaxy'] == ['Samsung Galaxy', 'Xperia', 'IPhone']\\...: <FixtureRequest for <Function test_one>>, 'scenario': <pytest_bdd.parser.Scenario object at 0x0000027BEB75C4F0>, ...}\n\n>   self._inner_hookexec = lambda hook, methods, kwargs: hook.multicall(\n        methods,\n        kwargs,\n        firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\n    )\nE   TypeError: 'NoneType' object is not an iterator\n\n..\\..\\appdata\\local\\programs\\python\\python38\\lib\\site-packages\\pluggy\\manager.py:84: TypeError"}, "steps": [{"name": "Given I am in the ecommerce website", "status": "passed", "start": 1630107085034, "stop": 1630107086779}, {"name": "When I click on Mobile Tab", "status": "passed", "start": 1630107086780, "stop": 1630107087625}, {"name": "Then all available mobiles are displayed", "status": "skipped", "attachments": [{"name": "screenshot", "source": "a2e17ce7-92f2-4220-ba05-8b1753159c2f-attachment.png", "type": "image/png"}], "start": 1630107087625, "stop": 1630107091055}], "start": 1630107083542, "stop": 1630107088791, "uuid": "f0638d1e-d096-94ef-a2b4-6b6d6adfa76a", "fullName": "features\\ecommerce.feature:Check Mobile Phone", "labels": [{"name": "host", "value": "DESKTOP-U6SR4NP"}, {"name": "thread", "value": "22416-MainThread"}, {"name": "framework", "value": "pytest-bdd"}, {"name": "language", "value": "cpython3"}, {"name": "feature", "value": "ecommerce website"}]}